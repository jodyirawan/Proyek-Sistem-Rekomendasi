# -*- coding: utf-8 -*-
"""ProyekAkhir_MLT_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qbGuv_FzJI5nGhj2Up-7WT80RoLKHSzM

# 1. Data Understanding

## 1.2. Mempersiapkan Dataset
"""

#Mengunduh Datasat
!wget https://github.com/jodyirawan/Proyek-Sistem-Rekomendasi/raw/main/Dataset_Movie_recommendation.zip

#ekstrak dataset
!unzip /content/Dataset_Movie_recommendation.zip

# Import modul pandas untuk membaca dataframe
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
movies = pd.read_csv('/content/movies.csv')
rating = pd.read_csv('/content/ratings.csv')

# Cek jumlah data yang akan digunakan
print('Jumlah judul film pada dataset: ', len(movies.movieId.unique()))
print('Jumlah rating yang diberikan: ', len(rating.movieId.unique()))

"""# 2. Eksplorasi Data

## 2.1 movies Variabel
"""

#melihat info variable movie
movies.info()
movies.head()

genres=movies['genres'].str.get_dummies(sep='|')
genres.head()

movies=pd.merge(movies, genres, left_index=True, right_index=True)
movies.head()

movies.drop(['genres'], axis = 1,inplace=True) 
movies.head()

"""## 2.2 rating Variabel"""

#melihat info variable rating
rating.info()
rating.head()

#Memuat deskripsi setiap kolom dataframe
rating.describe()

#drop kolom yang tidak digunakan
rating.drop(['timestamp'], axis = 1,inplace=True)

#cek jumlah data yang digunakan
print('Jumlah userId: ', len(rating.userId.unique()))
print('Jumlah movieId: ', len(rating.movieId.unique()))
print('Jumlah data rating: ', len(rating))

"""# 3. Data Preprocessing

## 3.1 Menggabungkan movie
"""

import numpy as np
 
# Menggabungkan seluruh movieId pada kategori movies
movies_all = np.concatenate((
    movies.movieId.unique(),
    rating.movieId.unique()
))
 
# Mengurutkan data dan menghapus data yang sama
movies_all = np.sort(np.unique(movies_all))
 
print('Jumlah seluruh data movie berdasarkan userId: ', len(movies_all))

movies.info()
rating.info()

"""## 3.2 Menggabungkan dataframe rating dengan movie"""

# Menggabungkan dataframe rating dengan movie berdasarkan nilai movieId
movies_one = pd.merge(rating, movies , on='movieId', how='left')
movies_one

# Cek missing value dengan fungsi isnull()
movies_one.isnull().sum()

# Mengecek berapa jumlah movies_one
len(movies_one.movieId.unique())

title = movies_one.title.value_counts().reset_index()
title.columns = ['title','count']

plt.figure(figsize = (16,8))
plt.title("10 Film Terpopuler")
sns.barplot(x = 'count', y = 'title', data = title.head(10), palette='icefire_r');
plt.ylabel('title')
plt.xlabel('Count')
plt.show()

"""# 4. Data Preparation"""

# # Mengecek judul film yang unik
movies_one.title.unique()

"""## 4.1 Tahap Persiapan"""

# Membuat variabel preparation yang berisi dataframe movies_one kemudian mengurutkan berdasarkan movieId
preparation = movies_one
preparation = preparation.sort_values('movieId')

# Membuang data duplikat pada variabel preparation
preparation = preparation.drop_duplicates('movieId')
preparation

"""## 4.2 konversi data series menjadi list"""

# Mengonversi data series ‘Name’ menjadi dalam bentuk list
movie_id = preparation['movieId'].tolist()
 
# Mengonversi data series ‘title’ menjadi dalam bentuk list
movie_name = preparation['title'].tolist()
 
print(len(movie_id))
print(len(movie_name))

"""## 4.3 membuat dictionary untuk menentukan pasangan key-value"""

# Membuat dictionary untuk data ‘movie_id’ dan ‘movie_name’
movies_new = pd.DataFrame({
    'id': movie_id,
    'movies_name': movie_name
})
movies_new

"""# 5. Model Development dengan Collaborative Filtering

## 5.1. import library yang dibutuhkan
"""

# Import library
import pandas as pd
import numpy as np 
from zipfile import ZipFile
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path
import matplotlib.pyplot as plt

"""## 5.2. membaca dan memahami dataset"""

# Membaca dataset
 
df = rating
df

"""## 5.3. menyandikan (encode) fitur ‘user’ dan ‘movieId’ ke dalam indeks integer"""

# Mengubah userID menjadi list tanpa nilai yang sama
user_ids = df['userId'].unique().tolist()
print('list userId: ', user_ids)
 
# Melakukan encoding userID
user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded userId : ', user_to_user_encoded)
 
# Melakukan proses encoding angka ke ke userID
user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke userId: ', user_encoded_to_user)

# Mengubah movieId menjadi list tanpa nilai yang sama
movie_ids = df['movieId'].unique().tolist()
 
# Melakukan proses encoding movieId
movie_to_movie_encoded = {x: i for i, x in enumerate(movie_ids)}
 
# Melakukan proses encoding angka ke movieId
movie_encoded_to_movie = {i: x for i, x in enumerate(movie_ids)}

# petakan userID dan movieId ke dataframe yang berkaitan

# Mapping userID ke dataframe user
df['user'] = df['userId'].map(user_to_user_encoded)
 
# Mapping movieId ke dataframe movie
df['movie'] = df['movieId'].map(movie_to_movie_encoded)

"""## 5.4. cek data dan mengubah nilai rating menjadi float"""

# Mendapatkan jumlah user
num_users = len(user_to_user_encoded)
print(num_users)
 
# Mendapatkan jumlah movie
num_movie = len(movie_encoded_to_movie)
print(num_movie)
 
# Mengubah rating menjadi nilai float
df['rating'] = df['rating'].values.astype(np.float32)
 
# Nilai minimum rating
min_rating = min(df['rating'])
 
# Nilai maksimal rating
max_rating = max(df['rating'])
 
print('Number of User: {}, Number of movie: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_movie, min_rating, max_rating
))

"""## 5.5 Membagi Data untuk Training dan Validasi dengan komposisi 80:20"""

# Mengacak dataset agar distribusinya menjadi random
df = df.sample(frac=1, random_state=42)
df

# Membuat variabel x untuk mencocokkan data user dan movie menjadi satu value
x = df[['user', 'movie']].values
 
# Membuat variabel y untuk membuat rating dari hasil 
y = df['rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values
 
# Membagi menjadi 80% data train dan 20% data validasi
train_indices = int(0.8 * df.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)
 
print(x, y)

"""# 6. Proses Training

## 6.1. melakukan proses embedding
"""

# melakukan proses embedding terhadap data user dan movie
class RecommenderNet(tf.keras.Model):
 
  # Insialisasi fungsi
  def __init__(self, num_users, num_movie, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_movie = num_movie
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding( # layer embedding user
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias
    self.movie_embedding = layers.Embedding( # layer embeddings movie
        num_movie,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.movie_bias = layers.Embedding(num_movie, 1) # layer embedding movie bias
 
  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1
    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2
    movie_vector = self.movie_embedding(inputs[:, 1]) # memanggil layer embedding 3
    movie_bias = self.movie_bias(inputs[:, 1]) # memanggil layer embedding 4
 
    dot_user_movie = tf.tensordot(user_vector, movie_vector, 2) 
 
    x = dot_user_movie + user_bias + movie_bias
    
    return tf.nn.sigmoid(x) # activation sigmoid

"""## 6.2. proses compile terhadap model"""

# proses compile terhadap model
model = RecommenderNet(num_users, num_movie, 50) # inisialisasi model
 
# model compile
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""## 6.3 proses training"""

# Memulai training
 
history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 8,
    epochs = 100,
    validation_data = (x_val, y_val)
)

"""## 6.4. Visualisasi Metrik"""

# Plot metrik evaluasi dengan matplotlib
plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""## 6.5. Mendapatkan Rekomendasi film"""

# membuat daftar film untuk direkomendasikan pada pengguna.
movies_df = movies_new
df = pd.read_csv('ratings.csv')
 
# Mengambil sample user
user_id = df.userId.sample(1).iloc[0]
movie_visited_by_user = df[df.userId == user_id]
 
# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html 
movie_not_visited = movies_df[~movies_df['id'].isin(movie_visited_by_user.movieId.values)]['id'] 
movie_not_visited = list(
    set(movie_not_visited)
    .intersection(set(movie_to_movie_encoded.keys()))
)
 
movie_not_visited = [[movie_to_movie_encoded.get(x)] for x in movie_not_visited]
user_encoder = user_to_user_encoded.get(user_id)
user_movie_array = np.hstack(
    ([[user_encoder]] * len(movie_not_visited), movie_not_visited)
)

# memperoleh rekomendasi film
ratings = model.predict(user_movie_array).flatten()
 
top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_movie_ids = [
    movie_encoded_to_movie.get(movie_not_visited[x][0]) for x in top_ratings_indices
]
 
print('Showing recommendations for users: {}'.format(user_id))
print('===' * 9)
print('movie with high ratings from user')
print('----' * 8)
 
top_movie_user = (
    movie_visited_by_user.sort_values(
        by = 'rating',
        ascending=False
    )
    .head(5)
    .movieId.values
)
 
movie_df_rows = movies_df[movies_df['id'].isin(top_movie_user)]
for row in movie_df_rows.itertuples():
    print(row.movies_name)
 
print('----' * 8)
print('Top 10 movie recommendation')
print('----' * 8)
 
recommended_movie = movies_df[movies_df['id'].isin(recommended_movie_ids)]
for row in recommended_movie.itertuples():
    print(row.movies_name)